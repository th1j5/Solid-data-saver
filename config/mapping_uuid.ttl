@base <http://localhost.com:8080/api/clients/> . 

@prefix : <http://example.com/rmlmapping/> . # just representing the local mapping.ttl RDF graph

@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> . # functions
@prefix fno: <http://w3id.org/function/ontology#> .

@prefix lwm2m: <${LwM2Montology}> . # will be replaced in Javascript by ontology parameter

#### DATASOURCE
:datasource
    rml:source "data.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$" # something strange is going on with the iterator! (<-> specs)
    .
#### DEVICE
:DeviceMap a rr:TriplesMap;
  rml:logicalSource :datasource;

  rr:subjectMap [ 
    rr:template "{$.leshanServer.protocol}://{$.leshanServer.domain}/{$.device.ep}";
    rr:class lwm2m:Device;
  ];

  rr:predicateObjectMap [ 
    rr:predicate lwm2m:hasDeviceID ; 
    rr:objectMap [ rml:reference "$.device.ep" ; rr:datatype xsd:string ]
    # see specs: normale should be "$.device.ep"
    # This works NOT with rmlmapper in java, but it does for RocketRML in Javascript
  ],
  [ 
    rr:predicate lwm2m:contains ;
    rr:objectMap [ rr:parentTriplesMap :ObjectInstanceMap ]
  ].
#### OBJECT
:ObjectInstanceMap a rr:TriplesMap;
  rml:logicalSource :datasource;

  #rr:subjectMap :ObjectInstanceFunctionMap;	# This doesn't work to create an IRI created by function
  rr:subjectMap [
    rr:class lwm2m:ObjectInstance; # This doesn't work anymore? --> set at Function --> extra predicate
    rr:template "{$.leshanServer.protocol}://{$.leshanServer.domain}/{$.device.ep}/{$.meas[*].object}/{$.meas[*].objectInstance}";
  ];

  rr:predicateObjectMap [
    rr:predicate rdf:type;
    #rr:objectMap [ rr:template "${LwM2Montology}{$.meas[*].object}" ];
    rr:objectMap :ObjectClassIRIFunctionMap; # should map 3303 --> LWM2MTemperatureObject
  ],
  [ # sad that we need an extra predicate node, because rr:class or rr:object or rr:constant (see rest of document) should work
    rr:predicate rdf:type;
    rr:object lwm2m:ObjectInstance;
  ],
  [
    rr:predicate lwm2m:containedBy;
    rr:objectMap [ rr:parentTriplesMap :DeviceMap ]
  ],
  [
    rr:predicate lwm2m:consistsOf;
    rr:objectMap [ rr:parentTriplesMap :ResourceMap ]
  ],
  [
    rr:predicate lwm2m:hasObjectInstanceID;
    rr:objectMap [ rr:reference "$.meas[*].objectInstance" ; rr:datatype xsd:integer ]
  ].
#### RESOURCE
:ResourceMap a rr:TriplesMap;
  rml:logicalSource :datasource;

  rr:subjectMap [
    rr:template "{$.leshanServer.protocol}://{$.leshanServer.domain}/.well-known/genid/{*.meas[*].skolemIRI}";
    rr:class lwm2m:ResourceInstance
  ];

  rr:predicateObjectMap [
    rr:predicate lwm2m:hasValue;
    rr:objectMap [ rml:reference "$.meas[*].value" ; rr:datatype xsd:float ]
  ],
  [
    rr:predicate rdf:type;
    #rr:objectMap [ rr:template "${LwM2Montology}{$.meas[*].resource}" ]
    rr:objectMap :ResourceClassIRIFunctionMap
  ],
  [ # sad that we need an extra predicate node, because rr:class or rr:object or rr:constant (see rest of document) should work
    rr:predicate rdf:type;
    rr:object lwm2m:ResourceInstance;
  ],
  [
    rr:predicate lwm2m:organizedInto;
    rr:objectMap [ rr:parentTriplesMap :ObjectInstanceMap ]
  ],
  [
    rr:predicate lwm2m:hasTimeStamp;
    #rr:objectMap [ rml:reference <> ; rr:datatype xsd:dateTime ]
    rr:objectMap :TimeStampFunctionMap;
    #rr:objectMap [ :TimeStampFunctionMap ; rr:datatype xsd:dateTime ]
  ].

#### FunctionMaps
## TimeStamp
:TimeStampFunctionMap a fnml:FunctionMap;		#a fno:Function; # It's not a function! but a functionMap
  rr:datatype xsd:dateTime; # output type -> dateTime
  fnml:functionValue [
    rml:logicalSource :datasource ;
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant <http://functions.com/func#timestamp> ]
    ],
    [
      rr:predicate <inputString> ;
      rr:object "This should not be needed, since this function has no input parameters"
    ]
  ] .

## object to IRI mapper (3303 --> lwm2m:TemperatureObject)
:ObjectClassIRIFunctionMap a fnml:FunctionMap;
  #rr:constant lwm2m:ObjectInstance; #Add class ObjectInstance since it doesn't work at rr:class anymore
  fnml:functionValue [
    rml:logicalSource :datasource ;
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant <http://functions.com/func#objectClassIRI> ]
    ],
    [
      rr:predicate <inputString> ;
      rr:objectMap [ rr:reference "$.meas[*].object" ];
    ]
  ] .
## resource to IRI mapper (5700 --> lwm2m:SensorValue)
:ResourceClassIRIFunctionMap a fnml:FunctionMap;
  fnml:functionValue [
    rml:logicalSource :datasource ;
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant <http://functions.com/func#resourceClassIRI> ]
    ],
    [
      rr:predicate <inputString> ;
      rr:objectMap [ rr:reference "$.meas[*].object" ];
    ],
    [
      rr:predicate <inputString> ;
      rr:objectMap [ rr:reference "$.meas[*].resource" ];
    ]
  ] .

#### OBSOLETE
## Stop thinking functions
:ObjectInstanceFunctionMap a fnml:FunctionMap;
  rr:constant <testing>;
  fnml:functionValue [
    rml:logicalSource :datasource ;
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant <http://functions.com/func#objectInstance> ]
    ],
    [
      rr:predicate <inputString> ;
      rr:objectMap [ rr:reference "ep" ];
    ],
    [
      rr:predicate <inputString> ;
      rr:objectMap [ rr:reference "res" ];
    ]
  ].
#<testing> rdf:PlainLiteral "http://test.com/" .

## Functions
#<http://functions.com/func#timestamp> a fno:Function;
#  fno:name "Timestamp of current time";
#  fno:output ( [fno:predicate xsd:dateTime] ) .

#:TestFunctionMap a fno:Function;
#  fnml:functionValue [
#             rml:logicalSource :datasource ;
#             rr:predicateObjectMap [
#                 rr:predicate fno:executes ;
#                 rr:objectMap [ rr:constant <http://functions.com/func#createDescription> ]
#             ],
#             [
#                 rr:predicate _:inputString ;
#                 rr:objectMap [ rml:reference "name" ]
#             ],
#             [
#                 rr:predicate _:inputString ;
#                 rr:objectMap [ rml:reference "age" ]
#             ];
#  ] .
